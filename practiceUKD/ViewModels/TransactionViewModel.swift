import SwiftUI
import Combine

class TransactionViewModel: ObservableObject {
    @Published var transactions: [TransactionModel] = []
    @Published var categories: [TransactionCategoryModel] = []
    
    // –ö–ª—é—á—ñ –¥–ª—è UserDefaults
    private let transactionsKey = "userTransactions"
    private let categoriesKey = "userCategories"
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    init() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        createDefaultCategories()
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        loadCategories()
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        loadTransactions()
    }
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    private func createDefaultCategories() {
        let defaultCategories = [
            // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
            TransactionCategoryModel(name: "–†–æ–∑—Ä–æ–±–∫–∞", icon: "üíª", colorHex: "#4CAF50"),
            TransactionCategoryModel(name: "–î–∏–∑–∞–π–Ω", icon: "üé®", colorHex: "#2196F3"),
            TransactionCategoryModel(name: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", icon: "üìä", colorHex: "#9C27B0"),
            TransactionCategoryModel(name: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", icon: "üì£", colorHex: "#FFC107"),
            TransactionCategoryModel(name: "–ü—Ä–æ–¥–∞–∂—ñ", icon: "üí∞", colorHex: "#FF9800"),
            TransactionCategoryModel(name: "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", icon: "üìà", colorHex: "#4CAF50"),
            TransactionCategoryModel(name: "–§—Ä—ñ–ª–∞–Ω—Å", icon: "üë®‚Äçüíª", colorHex: "#2196F3"),
            TransactionCategoryModel(name: "–û—Ä–µ–Ω–¥–∞", icon: "üè†", colorHex: "#9C27B0"),
            
            // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
            TransactionCategoryModel(name: "–á–∂–∞", icon: "üçî", colorHex: "#FF5252"),
            TransactionCategoryModel(name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", icon: "üöó", colorHex: "#FF9800"),
            TransactionCategoryModel(name: "–ñ–∏—Ç–ª–æ", icon: "üè†", colorHex: "#2196F3"),
            TransactionCategoryModel(name: "–†–æ–∑–≤–∞–≥–∏", icon: "üé¨", colorHex: "#9C27B0"),
            TransactionCategoryModel(name: "–ó–¥–æ—Ä–æ–≤'—è", icon: "üíä", colorHex: "#4CAF50"),
            TransactionCategoryModel(name: "–û–¥—è–≥", icon: "üëï", colorHex: "#E91E63"),
            TransactionCategoryModel(name: "–¢–µ—Ö–Ω—ñ–∫–∞", icon: "üì±", colorHex: "#607D8B"),
            TransactionCategoryModel(name: "–ü–æ–¥–∞—Ä—É–Ω–∫–∏", icon: "üéÅ", colorHex: "#FF5252"),
            TransactionCategoryModel(name: "–û—Å–≤—ñ—Ç–∞", icon: "üìö", colorHex: "#2196F3"),
            TransactionCategoryModel(name: "–ü–æ–¥–∞—Ç–∫–∏", icon: "üìù", colorHex: "#607D8B"),
            TransactionCategoryModel(name: "–Ü–Ω—à–µ", icon: "‚ùì", colorHex: "#607D8B")
        ]
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—â–æ –Ω–µ–º–∞—î - –¥–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ
        if categories.isEmpty {
            categories = defaultCategories
            saveCategories()
        }
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    private func loadCategories() {
        if let data = UserDefaults.standard.data(forKey: categoriesKey),
           let savedCategories = try? JSONDecoder().decode([TransactionCategoryModel].self, from: data) {
            categories = savedCategories
        }
    }
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    private func saveCategories() {
        if let encoded = try? JSONEncoder().encode(categories) {
            UserDefaults.standard.set(encoded, forKey: categoriesKey)
        }
    }
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    func addCategory(name: String, icon: String, colorHex: String) {
        let newCategory = TransactionCategoryModel(
            name: name,
            icon: icon,
            colorHex: colorHex
        )
        
        categories.append(newCategory)
        saveCategories()
    }
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    func deleteCategory(at index: Int) {
        guard index < categories.count else { return }
        categories.remove(at: index)
        saveCategories()
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    func getAllCategories() -> [TransactionCategoryModel] {
        return categories
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    private func loadTransactions() {
        if let data = UserDefaults.standard.data(forKey: transactionsKey),
           let savedTransactions = try? JSONDecoder().decode([TransactionModel].self, from: data) {
            transactions = savedTransactions
        }
    }
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    private func saveTransactions() {
        if let encoded = try? JSONEncoder().encode(transactions) {
            UserDefaults.standard.set(encoded, forKey: transactionsKey)
        }
    }
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    func addTransaction(title: String, amount: Double, date: Date, isIncome: Bool, category: TransactionCategoryModel, note: String?, userId: String) {
        let newTransaction = TransactionModel(
            title: title,
            amount: amount,
            date: date,
            isIncome: isIncome,
            category: category,
            note: note,
            userId: userId
        )
        
        transactions.append(newTransaction)
        saveTransactions()
    }
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    func deleteTransaction(at index: Int) {
        guard index < transactions.count else { return }
        transactions.remove(at: index)
        saveTransactions()
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    func getUserTransactions(userId: String) -> [TransactionModel] {
        return transactions.filter { $0.userId == userId }
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ —Ç–∏–ø–æ–º (–¥–æ—Ö—ñ–¥/–≤–∏—Ç—Ä–∞—Ç–∞)
    func getTransactionsByType(userId: String, isIncome: Bool) -> [TransactionModel] {
        return transactions.filter { $0.userId == userId && $0.isIncome == isIncome }
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –º—ñ—Å—è—Ü–µ–º
    func getTransactionsForCurrentMonth(userId: String) -> [TransactionModel] {
        let calendar = Calendar.current
        let now = Date()
        let startOfMonth = calendar.date(from: calendar.dateComponents([.year, .month], from: now))!
        let endOfMonth = calendar.date(byAdding: DateComponents(month: 1, day: -1), to: startOfMonth)!
        
        return transactions.filter { transaction in
            transaction.userId == userId &&
            transaction.date >= startOfMonth &&
            transaction.date <= endOfMonth
        }
    }
    
    // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –¥–∞—Ç–æ—é
    func groupTransactionsByDate(transactions: [TransactionModel]) -> [String: [TransactionModel]] {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "uk_UA")
        formatter.dateFormat = "d MMMM, yyyy"
        
        var grouped = [String: [TransactionModel]]()
        
        for transaction in transactions {
            let dateString = formatter.string(from: transaction.date)
            if grouped[dateString] == nil {
                grouped[dateString] = [transaction]
            } else {
                grouped[dateString]?.append(transaction)
            }
        }
        
        return grouped
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –¥–æ—Ö–æ–¥—ñ–≤
    func getTotalIncome(userId: String) -> Double {
        return transactions
            .filter { $0.userId == userId && $0.isIncome }
            .reduce(0) { $0 + $1.amount }
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –≤–∏—Ç—Ä–∞—Ç
    func getTotalExpense(userId: String) -> Double {
        return transactions
            .filter { $0.userId == userId && !$0.isIncome }
            .reduce(0) { $0 + $1.amount }
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
    func getCurrentBalance(userId: String) -> Double {
        let income = getTotalIncome(userId: userId)
        let expense = getTotalExpense(userId: userId)
        return income - expense
    }
} 